/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Configures the classpath and the source and resource directories
 * of the integrationTest task.
 */
sourceSets {
    //Declaring this source set creates compile time and runtime configurations for it.
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/int-test/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/int-test/groovy')
        }
        resources.srcDir file('src/int-test/resources')
    }
}

/*
 * Configures the compile and runtime configurations for our integration tests
 * and includes the dependencies of the test task.
 */
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

/*
 * Create the task that runs the integration tests found from the
 * configured source directory and uses the correct classpath.\
 */
task integrationTest(type: Test) {
    group = 'verification'
    String rioHome = "${project(":distribution").buildDir.path}/rio-${version}"
    if (! new File(rioHome, "lib").exists()) {
        dependsOn([":distribution:createDistribution",
                   ":cybernode-proxy:publishToMavenLocal",
                   ":monitor-proxy:publishToMavenLocal"])
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    systemProperty 'java.security.policy', policyAll
    systemProperty "rio.home", "${rioHome}"
    systemProperty "rio.test.home", "${projectDir.path}"
    systemProperty "rio.test.webster.roots", "${projectDir.path}/build/classes/java/;${projectDir.path}/build/classes/groovy/"
    systemProperty "org.rioproject.test.manager.config", "${projectDir.path}/src/int-test/conf/manager-config.groovy"
    systemProperty "java.rmi.server.useCodebaseOnly", "false"
    systemProperty "logback.configurationFile", "${rioHome}/config/logging/logback.groovy"
    systemProperty "java.util.logging.config.file", "${rioHome}/config/logging/logging.properties"
    systemProperty "rio.log.dir", "/tmp/${System.getProperty("user.name")}/logs"

    mustRunAfter test

    /* If you want to ensure that integration tests are run every time when you invoke
     * this task, uncomment the following line. */
    //outputs.upToDateWhen { false }
}

/* Ensure that the check task fails the build if there are failing integration tests. */
tasks.check.dependsOn integrationTest