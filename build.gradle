/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.5" apply false
    id 'org.owasp.dependencycheck' version '5.2.2' apply false
}

allprojects {
    group = 'org.rioproject'
    version = '6.0.0'

    ext {
        groovyVersion = "2.4.19"
        junitVersion = "4.12"
        logbackVersion = "1.2.3"
        riverVersion = "2.2.2"
        slf4jVersion = "1.7.25"
        rioVersion = version
        policyAll = file("${rootProject.projectDir}//distribution/src/main/policy/policy.all").absolutePath
        def sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
        buildTime = sdf.format(new Date())

        logRuntime = ["org.slf4j:jul-to-slf4j:$slf4jVersion",
                      "ch.qos.logback:logback-classic:$logbackVersion"]
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    apply from: "${rootDir}/gradle/integrationTest.gradle"
    apply from: "${rootDir}/gradle/cve.gradle"

    if (!project.path.contains("example") && project.name != "rio-int-tests") {
        apply from: "${rootDir}/gradle/publishing.gradle"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.encoding = 'UTF-8'
        options.annotationProcessorPath = project.configurations.annotationProcessor
        options.compilerArgs << "-Xlint:unchecked"
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    clean.doLast {
        subprojects {
            ["${System.getProperty('user.home')}/.gradle/caches/modules-2/files-2.1",
             "${System.getProperty('user.home')}/.m2/repository"].each { repo ->
                File file = repo.contains(".m2") ? new File(repo, "${project.group}/${project.name}".replace(".", "/")) :
                        new File("${repo}/${project.group}/${project.name}")
                if (file.exists()) {
                    file.deleteDir()
                }
            }
        }
    }
}

