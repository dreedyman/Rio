/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.codehaus.groovy.runtime.GStringImpl

/* Build a distribution  */
description = 'Module :: Rio Distribution'

apply plugin: 'base'
apply plugin: 'maven'
apply plugin: 'maven-publish'

/* Declare a custom configuration for distribution only dependencies */
configurations {
    distribution
    distribution.extendsFrom(runtime)
}

dependencies {
    distribution "org.codehaus.groovy:groovy-all:${groovyVersion}"
    distribution "org.apache.river.examples:browser:1.0"
    distribution "org.apache.river:start:$riverVersion"
    distribution "org.apache.river:reggie:$riverVersion"
    distribution "org.apache.river:reggie-dl:$riverVersion"
    distribution "net.jini.lookup:serviceui:$riverVersion"
    distribution "org.slf4j:jul-to-slf4j:$slf4jVersion"
    distribution "ch.qos.logback:logback-classic:$logbackVersion"
}

ext {
    distDir = "${project.buildDir.path}/rio" as GStringImpl
}

/*
 * This will gather up and organize subproject dependencies, and resolve distribution dependencies
 */
task gatherDeps() {
    description = "Gather up and organize distribution dependencies"

    doLast {
        File dir = file("${distDir}-${version}")
        if (dir.exists()) {
            delete dir
            println "Removed distribution $dir"
        }
        println "Creating distribution $dir"

        /* Copy over distribution dependencies */
        project.configurations['distribution'].files.each {file ->
            if (filter(file.name)) {
                String dest
                if (file.path.contains("-dl") || (file.path.contains("ui"))) {
                    dest = "lib-dl"
                } else if (file.path.contains("logback") || file.path.contains("slf4j")) {
                    dest = "lib/logging"
                } else {
                    dest = "lib"
                }
                copy {
                    from file
                    into "$distDir-${version}/$dest"
                }
            }
        }
    }
}

static boolean filter(artifact) {
    def exclusions = ["examples", "rio-int-tests", "distribution", "rio-logging"]
    boolean include = true
    for(String exclude : exclusions) {
        if(artifact.contains(exclude))  {
            include = false
            break
        }
    }
    include
}

task createDistribution(dependsOn: [":rio-platform:install",
                                    ":rio-start:install",
                                    ":rio-lib:install",
                                    ":resolver-aether:install",
                                    ":resolver-project:install",
                                    ":cybernode-service:install",
                                    ":cybernode-ui:install",
                                    ":monitor-service:install",
                                    ":rio-cli:install",
                                    ":rio-test:install",
                                    ":watch-ui:install",
                                    gatherDeps]) {
    description 'Creates a Rio distribution'
    doLast {
        File rioLibDir = file("$distDir-${version}/lib/")
        File rioDlDir = file("$distDir-${version}/lib-dl")
        File rioLoggingDir = file("$distDir-${version}/lib/logging")
        File rioResolverDir = file("$distDir-${version}/lib/resolver")

        rootProject.subprojects.each { project ->
            boolean include = filter(project.path)
            if(include) {
                //println "Processing ${project.path}"
                project.tasks.withType(Jar).each { jar ->
                    File target
                    String name = jar.archiveName
                    if(!name.contains("sources") && !name.contains("javadoc")) {
                        if (name.indexOf('dl') > 0 || name.indexOf('ui') > 0 || name.indexOf('proxy') > 0) {
                            target = rioDlDir
                        } else if (name.contains("resolver")) {
                            target = rioResolverDir
                        } else if (name.contains("logging")) {
                            target = rioLoggingDir
                        } else {
                            target = rioLibDir
                        }
                        if (file(jar.archivePath).exists()) {
                            copy {
                                from jar.archivePath
                                into target
                            }
                        } else {
                            println "Archive does not exist ${jar.archivePath}"
                        }
                    }
                }
            }
        }

        copy {
            from("${project.rootProject.projectDir}") {
                include "LICENSE.txt"
            }
            into "${distDir}-${version}"
        }

        copy {
            from("${project.projectDir}/src/main") {
                include "config/**"
                include "policy/**"
            }
            into "${distDir}-${version}"
        }

        copy {
            from("${project.rootProject.projectDir}/bin") {
                include "**"
                fileMode = 0755
                filter(ReplaceTokens,
                        tokens: [rioV: project.version, groovyV: groovyVersion, riverV: riverVersion])
            }
            into "${distDir}-${version}/bin"
        }
    }
}

task distribution(type: Zip, dependsOn: [createDistribution]) {
    description 'Creates a Rio distribution archive'
    doFirst {
        println "Zipping distribution rio-${version} -> distribution-${version}.zip"
    }
    //compression = Compression.GZIP // for Tar type
    baseName = "distribution"
    destinationDir = project.buildDir
    from("${project.buildDir.path}/rio-${version}")
    into "distribution-${version}"
    doLast {
        println "Complete"
    }
}

archivesBaseName = "distribution"
def rioDistribution = file("build/distribution-${version}.zip")
artifacts {
    archives file: rioDistribution, name: 'distribution', type: 'zip', builtBy: distribution
}

/*def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            name "Dennis Reedy"
            email "dennis.reedy@gmail.com"
        }
    }

    contributors {
        contributor {
            name "Jim Clarke"
            organization "Oracle"
        }
        contributor {
            name "Larry Mitchell"
        }
        contributor {
            name "Kevin Hartig"
        }
        contributor {
            name "Ron Bowers"
            organization "Army Research Laboratories"
            organizationUrl "http://www.arl.army.mil/"
        }
        contributor {
            name "Fabrizio Giuduci"
            organization "Tidalwave"
            organizationUrl "http://bluemarine.tidalwave.it/"
        }
        contributor {
            name "Jerome Bernard"
            organization "Kalixia"
        }
        contributor {
            name "Jeff Ramsdale"
        }
    }

    scm {
        url "https://github.com/dreedyman/Rio"
    }
}*/

apply from: "${rootDir}/gradle/poms.gradle"

publishing {
    publications {
        distribution(MavenPublication) {
            artifact rioDistribution
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', "$project.description")
                root.appendNode('name', "${project.name}")
                root.appendNode('url', 'https://github.com/dreedyman/Rio')
                root.children().last() + distPomConfig
            }
        }
    }
}

bintray {
    dryRun = true
    user = project.property('bintray.user')
    key = project.property('bintray.key')
    publications = ['distribution']

    pkg {
        repo = 'Rio'
        name = project.archivesBaseName
        licenses = ['Apache-2.0']
        publish = true
        vcsUrl = 'https://github.com/dreedyman/Rio'
        version {
            name = project.version
        }
    }
}
